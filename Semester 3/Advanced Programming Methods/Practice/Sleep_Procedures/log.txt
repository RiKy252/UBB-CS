ID: 1
Stack:
int v
int w;
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
int v
int w;
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
int v
int w;
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
int v
int w;
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
int v
int w;
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
int v
int w;
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
int v
int w;
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
int w;
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
int v
int w;
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
int v
int w;
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
int v
int w;
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
int w;
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
int w
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
w->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 2
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
w->0
Out:
File table:
Heap:


ID: 1
Stack:
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->0
Out:
File table:
Heap:


ID: 1
Stack:
w = 5
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->0
Out:
File table:
Heap:


ID: 1
Stack:
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
call sum([v * 10, w])
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
int v;
v = a + b;
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
int v
v = a + b;
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
v = a + b;
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->0

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
v = a + b
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->0

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->25

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->25

v->2
w->5
Out:
25
File table:
Heap:


ID: 1
Stack:
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
25
File table:
Heap:


ID: 1
Stack:
print(v)
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
25
File table:
Heap:


ID: 1
Stack:
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
25
2
File table:
Heap:


ID: 1
Stack:

Symbolic table:
v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
call product([v, w]);
fork(call sum([v, w]))
Symbolic table:

v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
call product([v, w])
fork(call sum([v, w]))
Symbolic table:

v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
fork(call sum([v, w]))
Symbolic table:

v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:

Symbolic table:

v->2
w->5
Out:
25
2
File table:
Heap:


ID: 3
Stack:
call sum([v, w])
Symbolic table:


v->2
w->5
Out:
25
2
File table:
Heap:


ID: 3
Stack:

Symbolic table:


v->2
w->5
Out:
25
2
File table:
Heap:


ID: 1
Stack:
int v
int w;
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
int w;
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
int w
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
w->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 2
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
w->0
Out:
File table:
Heap:


ID: 1
Stack:
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->0
Out:
File table:
Heap:


ID: 1
Stack:
w = 5
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->0
Out:
File table:
Heap:


ID: 1
Stack:
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
call sum([v * 10, w])
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
int v;
v = a + b;
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
int v
v = a + b;
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
v = a + b;
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->0

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
v = a + b
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->0

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->25

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->25

v->2
w->5
Out:
25
File table:
Heap:


ID: 1
Stack:
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
25
File table:
Heap:


ID: 1
Stack:
print(v)
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
25
File table:
Heap:


ID: 1
Stack:
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
25
2
File table:
Heap:


ID: 1
Stack:

Symbolic table:
v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
call product([v, w]);
fork(call sum([v, w]))
Symbolic table:

v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
call product([v, w])
fork(call sum([v, w]))
Symbolic table:

v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
fork(call sum([v, w]))
Symbolic table:

v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:

Symbolic table:

v->2
w->5
Out:
25
2
File table:
Heap:


ID: 3
Stack:
call sum([v, w])
Symbolic table:


v->2
w->5
Out:
25
2
File table:
Heap:


ID: 3
Stack:

Symbolic table:


v->2
w->5
Out:
25
2
File table:
Heap:


ID: 1
Stack:
int v
int w;
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
int w;
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
int w
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
w->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 2
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
w->0
Out:
File table:
Heap:


ID: 1
Stack:
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->0
Out:
File table:
Heap:


ID: 1
Stack:
w = 5
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->0
Out:
File table:
Heap:


ID: 1
Stack:
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
call sum([v * 10, w])
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
int v;
v = a + b;
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
int v
v = a + b;
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
v = a + b;
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->0

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
v = a + b
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->0

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->25

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->25

v->2
w->5
Out:
25
File table:
Heap:


ID: 1
Stack:
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
25
File table:
Heap:


ID: 1
Stack:
print(v)
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
25
File table:
Heap:


ID: 1
Stack:
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
25
2
File table:
Heap:


ID: 1
Stack:

Symbolic table:
v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
call product([v, w]);
fork(call sum([v, w]))
Symbolic table:

v->2
w->5
Out:
25
2
File table:
Heap:


ID: 1
Stack:
int v
Ref (int) a;
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
Ref (int) a;
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
Ref (int) a
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 10
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->0
Out:
File table:
Heap:


ID: 1
Stack:
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
new(a, 22)
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)))
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 2
Stack:
writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
print(v)
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:


ID: 2
Stack:
writeHeap(a, 30)
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 1
Stack:

Symbolic table:
a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
v = 32
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
print(v)
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 1
Stack:
int v
Ref (int) a;
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
Ref (int) a;
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
Ref (int) a
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 10
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->0
Out:
File table:
Heap:


ID: 1
Stack:
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
new(a, 22)
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)))
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 2
Stack:
writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
print(v)
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:


ID: 2
Stack:
writeHeap(a, 30)
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 1
Stack:

Symbolic table:
a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
v = 32
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
print(v)
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 1
Stack:
int v
Ref (int) a;
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
Ref (int) a;
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
Ref (int) a
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 10
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->0
Out:
File table:
Heap:


ID: 1
Stack:
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
new(a, 22)
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)))
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 2
Stack:
writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
print(v)
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:


ID: 2
Stack:
writeHeap(a, 30)
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 1
Stack:
int v
Ref (int) a;
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
Ref (int) a;
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
Ref (int) a
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 10
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->0
Out:
File table:
Heap:


ID: 1
Stack:
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
new(a, 22)
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)))
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 2
Stack:
writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
print(v)
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:


ID: 2
Stack:
writeHeap(a, 30)
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 1
Stack:

Symbolic table:
a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
v = 32
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
print(v)
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:

Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 1
Stack:
int v
Ref (int) a;
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
Ref (int) a;
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
Ref (int) a
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 10
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->0
Out:
File table:
Heap:


ID: 1
Stack:
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
new(a, 22)
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)))
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 2
Stack:
writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
print(v)
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:


ID: 2
Stack:
writeHeap(a, 30)
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 1
Stack:

Symbolic table:
a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
v = 32
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 1
Stack:
int v
Ref (int) a;
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
Ref (int) a;
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
Ref (int) a
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 10
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->0
Out:
File table:
Heap:


ID: 1
Stack:
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
new(a, 22)
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)))
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 2
Stack:
writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
print(v)
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:


ID: 2
Stack:
writeHeap(a, 30)
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 1
Stack:

Symbolic table:
a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
v = 32
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
print(v)
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:

Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 1
Stack:
bool a
int v;
a = true;
if (a) then { v = 2 } else { v = 3 };
print(v)
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
int v;
a = true;
if (a) then { v = 2 } else { v = 3 };
print(v)
Symbolic table:
a->false
Out:
File table:
Heap:


ID: 1
Stack:
int v
a = true;
if (a) then { v = 2 } else { v = 3 };
print(v)
Symbolic table:
a->false
Out:
File table:
Heap:


ID: 1
Stack:
a = true;
if (a) then { v = 2 } else { v = 3 };
print(v)
Symbolic table:
a->false
v->0
Out:
File table:
Heap:


ID: 1
Stack:
a = true
if (a) then { v = 2 } else { v = 3 };
print(v)
Symbolic table:
a->false
v->0
Out:
File table:
Heap:


ID: 1
Stack:
if (a) then { v = 2 } else { v = 3 };
print(v)
Symbolic table:
a->true
v->0
Out:
File table:
Heap:


ID: 1
Stack:
if (a) then { v = 2 } else { v = 3 }
print(v)
Symbolic table:
a->true
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 2
print(v)
Symbolic table:
a->true
v->0
Out:
File table:
Heap:


ID: 1
Stack:
print(v)
Symbolic table:
a->true
v->2
Out:
File table:
Heap:


ID: 1
Stack:

Symbolic table:
a->true
v->2
Out:
2
File table:
Heap:


ID: 1
Stack:
int v
Ref (int) a;
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
Ref (int) a;
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
Ref (int) a
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 10
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->0
Out:
File table:
Heap:


ID: 1
Stack:
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
new(a, 22)
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)))
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 2
Stack:
writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
print(v)
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:


ID: 2
Stack:
writeHeap(a, 30)
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 1
Stack:

Symbolic table:
a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
v = 32
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
print(v)
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:

Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 1
Stack:
int v
Ref (int) a;
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
Ref (int) a;
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
Ref (int) a
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 10
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->0
Out:
File table:
Heap:


ID: 1
Stack:
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
new(a, 22)
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)))
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 2
Stack:
writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
print(v)
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:


ID: 2
Stack:
writeHeap(a, 30)
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:


ID: 2
Stack:
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:

Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:


ID: 2
Stack:
v = 32
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:


ID: 2
Stack:
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:


ID: 2
Stack:
print(v)
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:


ID: 2
Stack:
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:


ID: 2
Stack:

Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
int v
Ref (int) a;
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
Ref (int) a;
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
Ref (int) a
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 10
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->0
Out:
File table:
Heap:


ID: 1
Stack:
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
new(a, 22)
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)))
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 2
Stack:
writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
print(v)
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:


ID: 2
Stack:
writeHeap(a, 30)
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 1
Stack:

Symbolic table:
a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
v = 32
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 1
Stack:
int v
Ref (int) a;
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
Ref (int) a;
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
Ref (int) a
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 10;
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 10
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->0
Out:
File table:
Heap:


ID: 1
Stack:
new(a, 22);
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
new(a, 22)
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(0, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)));
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
fork(writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a)))
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
print(v);
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 2
Stack:
writeHeap(a, 30);
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:
1->22


ID: 1
Stack:
print(v)
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
File table:
Heap:


ID: 2
Stack:
writeHeap(a, 30)
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
File table:
Heap:


ID: 1
Stack:
print(readHeap(a))
Symbolic table:
a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
v = 32;
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 1
Stack:

Symbolic table:
a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 2
Stack:
v = 32
print(v);
print(readHeap(a))
Symbolic table:

a->(1, int)
v->10
Out:
10
File table:
Heap:


ID: 1
Stack:
int v
int w;
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
int w;
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
int w
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
w->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 2
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
w->0
Out:
File table:
Heap:


ID: 1
Stack:
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->0
Out:
File table:
Heap:


ID: 1
Stack:
w = 5
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->0
Out:
File table:
Heap:


ID: 1
Stack:
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
call sum([v * 10, w])
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
int v;
v = a + b;
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
int v
v = a + b;
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
v = a + b;
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->0

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
v = a + b
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->0

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->25

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->25

v->2
w->5
Out:
25
File table:
Heap:


ID: 1
Stack:
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
25
File table:
Heap:


ID: 1
Stack:
print(v)
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
25
File table:
Heap:


ID: 1
Stack:
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
25
2
File table:
Heap:


ID: 1
Stack:

Symbolic table:
v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
call product([v, w]);
fork(call sum([v, w]))
Symbolic table:

v->2
w->5
Out:
25
2
File table:
Heap:


ID: 1
Stack:
int v
int w;
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
int w;
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
int w
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
w->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 2
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
w->0
Out:
File table:
Heap:


ID: 1
Stack:
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->0
Out:
File table:
Heap:


ID: 1
Stack:
w = 5
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->0
Out:
File table:
Heap:


ID: 1
Stack:
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
call sum([v * 10, w])
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
int v;
v = a + b;
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
int v
v = a + b;
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
v = a + b;
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->0

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
v = a + b
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->0

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->25

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->25

v->2
w->5
Out:
25
File table:
Heap:


ID: 1
Stack:
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
25
File table:
Heap:


ID: 1
Stack:
print(v)
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
25
File table:
Heap:


ID: 1
Stack:
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
25
2
File table:
Heap:


ID: 1
Stack:

Symbolic table:
v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
call product([v, w]);
fork(call sum([v, w]))
Symbolic table:
v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
call product([v, w])
fork(call sum([v, w]))
Symbolic table:
v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
int v;
v = a * b;
print(v)
return
fork(call sum([v, w]))
Symbolic table:
a->2
b->5

v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
int v
v = a * b;
print(v)
return
fork(call sum([v, w]))
Symbolic table:
a->2
b->5

v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
v = a * b;
print(v)
return
fork(call sum([v, w]))
Symbolic table:
a->2
b->5
v->0

v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
v = a * b
print(v)
return
fork(call sum([v, w]))
Symbolic table:
a->2
b->5
v->0

v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
print(v)
return
fork(call sum([v, w]))
Symbolic table:
a->2
b->5
v->10

v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
return
fork(call sum([v, w]))
Symbolic table:
a->2
b->5
v->10

v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 2
Stack:
fork(call sum([v, w]))
Symbolic table:
v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 2
Stack:

Symbolic table:
v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 3
Stack:
call sum([v, w])
Symbolic table:
v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 3
Stack:
int v;
v = a + b;
print(v)
return
Symbolic table:
a->2
b->5

v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 3
Stack:
int v
v = a + b;
print(v)
return
Symbolic table:
a->2
b->5

v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 3
Stack:
v = a + b;
print(v)
return
Symbolic table:
a->2
b->5
v->0

v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 3
Stack:
v = a + b
print(v)
return
Symbolic table:
a->2
b->5
v->0

v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 3
Stack:
print(v)
return
Symbolic table:
a->2
b->5
v->7

v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 3
Stack:
return
Symbolic table:
a->2
b->5
v->7

v->2
w->5
Out:
25
2
10
7
File table:
Heap:


ID: 3
Stack:

Symbolic table:
v->2
w->5
Out:
25
2
10
7
File table:
Heap:


ID: 1
Stack:
int v
int w;
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
int w;
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
int w
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
w->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 2
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
w->0
Out:
File table:
Heap:


ID: 1
Stack:
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->0
Out:
File table:
Heap:


ID: 1
Stack:
w = 5
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->0
Out:
File table:
Heap:


ID: 1
Stack:
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
call sum([v * 10, w])
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
int v;
v = a + b;
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
int v
v = a + b;
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
v = a + b;
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->0

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
v = a + b
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->0

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->25

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->25

v->2
w->5
Out:
25
File table:
Heap:


ID: 1
Stack:
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
25
File table:
Heap:


ID: 1
Stack:
print(v)
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
25
File table:
Heap:


ID: 1
Stack:
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
25
2
File table:
Heap:


ID: 1
Stack:

Symbolic table:
v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
call product([v, w]);
fork(call sum([v, w]))
Symbolic table:
v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
call product([v, w])
fork(call sum([v, w]))
Symbolic table:
v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
int v;
v = a * b;
print(v)
return
fork(call sum([v, w]))
Symbolic table:
a->2
b->5

v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
int v
v = a * b;
print(v)
return
fork(call sum([v, w]))
Symbolic table:
a->2
b->5

v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
v = a * b;
print(v)
return
fork(call sum([v, w]))
Symbolic table:
a->2
b->5
v->0

v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
v = a * b
print(v)
return
fork(call sum([v, w]))
Symbolic table:
a->2
b->5
v->0

v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
print(v)
return
fork(call sum([v, w]))
Symbolic table:
a->2
b->5
v->10

v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
return
fork(call sum([v, w]))
Symbolic table:
a->2
b->5
v->10

v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 2
Stack:
fork(call sum([v, w]))
Symbolic table:
v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 2
Stack:

Symbolic table:
v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 3
Stack:
call sum([v, w])
Symbolic table:
v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 3
Stack:
int v;
v = a + b;
print(v)
return
Symbolic table:
a->2
b->5

v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 3
Stack:
int v
v = a + b;
print(v)
return
Symbolic table:
a->2
b->5

v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 3
Stack:
v = a + b;
print(v)
return
Symbolic table:
a->2
b->5
v->0

v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 3
Stack:
v = a + b
print(v)
return
Symbolic table:
a->2
b->5
v->0

v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 3
Stack:
print(v)
return
Symbolic table:
a->2
b->5
v->7

v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 3
Stack:
return
Symbolic table:
a->2
b->5
v->7

v->2
w->5
Out:
25
2
10
7
File table:
Heap:


ID: 3
Stack:

Symbolic table:
v->2
w->5
Out:
25
2
10
7
File table:
Heap:


ID: 1
Stack:
int v
int w;
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
int w;
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
int w
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 2;
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
w->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 2
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->0
w->0
Out:
File table:
Heap:


ID: 1
Stack:
w = 5;
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->0
Out:
File table:
Heap:


ID: 1
Stack:
w = 5
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->0
Out:
File table:
Heap:


ID: 1
Stack:
call sum([v * 10, w]);
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
call sum([v * 10, w])
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
int v;
v = a + b;
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
int v
v = a + b;
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
v = a + b;
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->0

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
v = a + b
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->0

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
print(v)
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->25

v->2
w->5
Out:
File table:
Heap:


ID: 1
Stack:
return
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
a->20
b->5
v->25

v->2
w->5
Out:
25
File table:
Heap:


ID: 1
Stack:
print(v);
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
25
File table:
Heap:


ID: 1
Stack:
print(v)
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
25
File table:
Heap:


ID: 1
Stack:
fork(call product([v, w]);
fork(call sum([v, w])))
Symbolic table:
v->2
w->5
Out:
25
2
File table:
Heap:


ID: 1
Stack:

Symbolic table:
v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
call product([v, w]);
fork(call sum([v, w]))
Symbolic table:
v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
call product([v, w])
fork(call sum([v, w]))
Symbolic table:
v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
int v;
v = a * b;
print(v)
return
fork(call sum([v, w]))
Symbolic table:
a->2
b->5

v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
int v
v = a * b;
print(v)
return
fork(call sum([v, w]))
Symbolic table:
a->2
b->5

v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
v = a * b;
print(v)
return
fork(call sum([v, w]))
Symbolic table:
a->2
b->5
v->0

v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
v = a * b
print(v)
return
fork(call sum([v, w]))
Symbolic table:
a->2
b->5
v->0

v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
print(v)
return
fork(call sum([v, w]))
Symbolic table:
a->2
b->5
v->10

v->2
w->5
Out:
25
2
File table:
Heap:


ID: 2
Stack:
return
fork(call sum([v, w]))
Symbolic table:
a->2
b->5
v->10

v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 2
Stack:
fork(call sum([v, w]))
Symbolic table:
v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 2
Stack:

Symbolic table:
v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 3
Stack:
call sum([v, w])
Symbolic table:
v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 3
Stack:
int v;
v = a + b;
print(v)
return
Symbolic table:
a->2
b->5

v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 3
Stack:
int v
v = a + b;
print(v)
return
Symbolic table:
a->2
b->5

v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 3
Stack:
v = a + b;
print(v)
return
Symbolic table:
a->2
b->5
v->0

v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 3
Stack:
v = a + b
print(v)
return
Symbolic table:
a->2
b->5
v->0

v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 3
Stack:
print(v)
return
Symbolic table:
a->2
b->5
v->7

v->2
w->5
Out:
25
2
10
File table:
Heap:


ID: 3
Stack:
return
Symbolic table:
a->2
b->5
v->7

v->2
w->5
Out:
25
2
10
7
File table:
Heap:


ID: 3
Stack:

Symbolic table:
v->2
w->5
Out:
25
2
10
7
File table:
Heap:


ID: 1
Stack:
int v
v = 0;
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1;
sleep(5);
print(v * 10)
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
v = 0;
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1;
sleep(5);
print(v * 10)
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 0
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1;
sleep(5);
print(v * 10)
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1;
sleep(5);
print(v * 10)
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
fork(print(v);
v = v + 1);
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
fork(print(v);
v = v + 1)
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 2
Stack:
print(v);
v = v + 1
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->1
Out:
File table:
Heap:


ID: 2
Stack:
print(v)
v = v + 1
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
fork(print(v);
v = v + 1);
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->1
Out:
0
File table:
Heap:


ID: 2
Stack:
v = v + 1
Symbolic table:
v->0
Out:
0
File table:
Heap:


ID: 1
Stack:
fork(print(v);
v = v + 1)
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->1
Out:
0
File table:
Heap:


ID: 2
Stack:

Symbolic table:
v->1
Out:
0
File table:
Heap:


ID: 1
Stack:
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->1
Out:
0
File table:
Heap:


ID: 3
Stack:
print(v);
v = v + 1
Symbolic table:
v->1
Out:
0
File table:
Heap:


ID: 1
Stack:
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->2
Out:
0
File table:
Heap:


ID: 3
Stack:
print(v)
v = v + 1
Symbolic table:
v->1
Out:
0
File table:
Heap:


ID: 1
Stack:
fork(print(v);
v = v + 1);
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->2
Out:
0
1
File table:
Heap:


ID: 3
Stack:
v = v + 1
Symbolic table:
v->1
Out:
0
1
File table:
Heap:


ID: 1
Stack:
fork(print(v);
v = v + 1)
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->2
Out:
0
1
File table:
Heap:


ID: 3
Stack:

Symbolic table:
v->2
Out:
0
1
File table:
Heap:


ID: 1
Stack:
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->2
Out:
0
1
File table:
Heap:


ID: 4
Stack:
print(v);
v = v + 1
Symbolic table:
v->2
Out:
0
1
File table:
Heap:


ID: 1
Stack:
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->3
Out:
0
1
File table:
Heap:


ID: 4
Stack:
print(v)
v = v + 1
Symbolic table:
v->2
Out:
0
1
File table:
Heap:


ID: 1
Stack:
sleep(5);
print(v * 10)
Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 4
Stack:
v = v + 1
Symbolic table:
v->2
Out:
0
1
2
File table:
Heap:


ID: 1
Stack:
sleep(5)
print(v * 10)
Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 4
Stack:

Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 1
Stack:
sleep(4)
print(v * 10)
Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 1
Stack:
sleep(3)
print(v * 10)
Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 1
Stack:
sleep(2)
print(v * 10)
Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 1
Stack:
sleep(1)
print(v * 10)
Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 1
Stack:
sleep(0)
print(v * 10)
Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 1
Stack:
print(v * 10)
Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 1
Stack:

Symbolic table:
v->3
Out:
0
1
2
30
File table:
Heap:


ID: 1
Stack:
int v
v = 0;
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1;
sleep(5);
print(v * 10)
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
v = 0;
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1;
sleep(5);
print(v * 10)
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 0
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1;
sleep(5);
print(v * 10)
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1;
sleep(5);
print(v * 10)
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
fork(print(v);
v = v + 1);
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
fork(print(v);
v = v + 1)
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 2
Stack:
print(v);
v = v + 1
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->1
Out:
File table:
Heap:


ID: 2
Stack:
print(v)
v = v + 1
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
fork(print(v);
v = v + 1);
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->1
Out:
0
File table:
Heap:


ID: 2
Stack:
v = v + 1
Symbolic table:
v->0
Out:
0
File table:
Heap:


ID: 1
Stack:
fork(print(v);
v = v + 1)
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->1
Out:
0
File table:
Heap:


ID: 2
Stack:

Symbolic table:
v->1
Out:
0
File table:
Heap:


ID: 1
Stack:
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->1
Out:
0
File table:
Heap:


ID: 3
Stack:
print(v);
v = v + 1
Symbolic table:
v->1
Out:
0
File table:
Heap:


ID: 1
Stack:
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->2
Out:
0
File table:
Heap:


ID: 3
Stack:
print(v)
v = v + 1
Symbolic table:
v->1
Out:
0
File table:
Heap:


ID: 1
Stack:
fork(print(v);
v = v + 1);
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->2
Out:
0
1
File table:
Heap:


ID: 3
Stack:
v = v + 1
Symbolic table:
v->1
Out:
0
1
File table:
Heap:


ID: 1
Stack:
fork(print(v);
v = v + 1)
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->2
Out:
0
1
File table:
Heap:


ID: 3
Stack:

Symbolic table:
v->2
Out:
0
1
File table:
Heap:


ID: 1
Stack:
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->2
Out:
0
1
File table:
Heap:


ID: 4
Stack:
print(v);
v = v + 1
Symbolic table:
v->2
Out:
0
1
File table:
Heap:


ID: 1
Stack:
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->3
Out:
0
1
File table:
Heap:


ID: 4
Stack:
print(v)
v = v + 1
Symbolic table:
v->2
Out:
0
1
File table:
Heap:


ID: 1
Stack:
sleep(5);
print(v * 10)
Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 4
Stack:
v = v + 1
Symbolic table:
v->2
Out:
0
1
2
File table:
Heap:


ID: 1
Stack:
sleep(5)
print(v * 10)
Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 4
Stack:

Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 1
Stack:
sleep(4)
print(v * 10)
Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 1
Stack:
sleep(3)
print(v * 10)
Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 1
Stack:
sleep(2)
print(v * 10)
Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 1
Stack:
sleep(1)
print(v * 10)
Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 1
Stack:
sleep(0)
print(v * 10)
Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 1
Stack:
print(v * 10)
Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 1
Stack:

Symbolic table:
v->3
Out:
0
1
2
30
File table:
Heap:


ID: 1
Stack:
int v
v = 0;
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1;
sleep(5);
print(v * 10)
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
v = 0;
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1;
sleep(5);
print(v * 10)
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 0
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1;
sleep(5);
print(v * 10)
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1;
sleep(5);
print(v * 10)
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
fork(print(v);
v = v + 1);
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
fork(print(v);
v = v + 1)
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 2
Stack:
print(v);
v = v + 1
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->1
Out:
File table:
Heap:


ID: 2
Stack:
print(v)
v = v + 1
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
fork(print(v);
v = v + 1);
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->1
Out:
0
File table:
Heap:


ID: 2
Stack:
v = v + 1
Symbolic table:
v->0
Out:
0
File table:
Heap:


ID: 1
Stack:
fork(print(v);
v = v + 1)
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->1
Out:
0
File table:
Heap:


ID: 2
Stack:

Symbolic table:
v->1
Out:
0
File table:
Heap:


ID: 1
Stack:
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->1
Out:
0
File table:
Heap:


ID: 3
Stack:
print(v);
v = v + 1
Symbolic table:
v->1
Out:
0
File table:
Heap:


ID: 1
Stack:
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->2
Out:
0
File table:
Heap:


ID: 3
Stack:
print(v)
v = v + 1
Symbolic table:
v->1
Out:
0
File table:
Heap:


ID: 1
Stack:
fork(print(v);
v = v + 1);
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->2
Out:
0
1
File table:
Heap:


ID: 3
Stack:
v = v + 1
Symbolic table:
v->1
Out:
0
1
File table:
Heap:


ID: 1
Stack:
fork(print(v);
v = v + 1)
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->2
Out:
0
1
File table:
Heap:


ID: 3
Stack:

Symbolic table:
v->2
Out:
0
1
File table:
Heap:


ID: 1
Stack:
v = v + 1
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->2
Out:
0
1
File table:
Heap:


ID: 4
Stack:
print(v);
v = v + 1
Symbolic table:
v->2
Out:
0
1
File table:
Heap:


ID: 1
Stack:
while (v < 3) execute fork(print(v);
v = v + 1);
v = v + 1
sleep(5);
print(v * 10)
Symbolic table:
v->3
Out:
0
1
File table:
Heap:


ID: 4
Stack:
print(v)
v = v + 1
Symbolic table:
v->2
Out:
0
1
File table:
Heap:


ID: 1
Stack:
sleep(5);
print(v * 10)
Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 4
Stack:
v = v + 1
Symbolic table:
v->2
Out:
0
1
2
File table:
Heap:


ID: 1
Stack:
sleep(5)
print(v * 10)
Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 4
Stack:

Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 1
Stack:
sleep(4)
print(v * 10)
Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 1
Stack:
sleep(3)
print(v * 10)
Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 1
Stack:
sleep(2)
print(v * 10)
Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 1
Stack:
sleep(1)
print(v * 10)
Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 1
Stack:
sleep(0)
print(v * 10)
Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 1
Stack:
print(v * 10)
Symbolic table:
v->3
Out:
0
1
2
File table:
Heap:


ID: 1
Stack:

Symbolic table:
v->3
Out:
0
1
2
30
File table:
Heap:


ID: 1
Stack:
int v
v = 10;
fork(v = v - 1;
v = v - 1;
print(v));
sleep(10);
print(v * 10)
Symbolic table:
Out:
File table:
Heap:


ID: 1
Stack:
v = 10;
fork(v = v - 1;
v = v - 1;
print(v));
sleep(10);
print(v * 10)
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
v = 10
fork(v = v - 1;
v = v - 1;
print(v));
sleep(10);
print(v * 10)
Symbolic table:
v->0
Out:
File table:
Heap:


ID: 1
Stack:
fork(v = v - 1;
v = v - 1;
print(v));
sleep(10);
print(v * 10)
Symbolic table:
v->10
Out:
File table:
Heap:


ID: 1
Stack:
fork(v = v - 1;
v = v - 1;
print(v))
sleep(10);
print(v * 10)
Symbolic table:
v->10
Out:
File table:
Heap:


ID: 1
Stack:
sleep(10);
print(v * 10)
Symbolic table:
v->10
Out:
File table:
Heap:


ID: 2
Stack:
v = v - 1;
v = v - 1;
print(v)
Symbolic table:
v->10
Out:
File table:
Heap:


ID: 1
Stack:
sleep(10)
print(v * 10)
Symbolic table:
v->10
Out:
File table:
Heap:


ID: 2
Stack:
v = v - 1
v = v - 1;
print(v)
Symbolic table:
v->10
Out:
File table:
Heap:


ID: 1
Stack:
sleep(9)
print(v * 10)
Symbolic table:
v->10
Out:
File table:
Heap:


ID: 2
Stack:
v = v - 1;
print(v)
Symbolic table:
v->9
Out:
File table:
Heap:


ID: 1
Stack:
sleep(8)
print(v * 10)
Symbolic table:
v->10
Out:
File table:
Heap:


ID: 2
Stack:
v = v - 1
print(v)
Symbolic table:
v->9
Out:
File table:
Heap:


ID: 1
Stack:
sleep(7)
print(v * 10)
Symbolic table:
v->10
Out:
File table:
Heap:


ID: 2
Stack:
print(v)
Symbolic table:
v->8
Out:
File table:
Heap:


ID: 1
Stack:
sleep(6)
print(v * 10)
Symbolic table:
v->10
Out:
8
File table:
Heap:


ID: 2
Stack:

Symbolic table:
v->8
Out:
8
File table:
Heap:


ID: 1
Stack:
sleep(5)
print(v * 10)
Symbolic table:
v->10
Out:
8
File table:
Heap:


ID: 1
Stack:
sleep(4)
print(v * 10)
Symbolic table:
v->10
Out:
8
File table:
Heap:


ID: 1
Stack:
sleep(3)
print(v * 10)
Symbolic table:
v->10
Out:
8
File table:
Heap:


ID: 1
Stack:
sleep(2)
print(v * 10)
Symbolic table:
v->10
Out:
8
File table:
Heap:


ID: 1
Stack:
sleep(1)
print(v * 10)
Symbolic table:
v->10
Out:
8
File table:
Heap:


ID: 1
Stack:
sleep(0)
print(v * 10)
Symbolic table:
v->10
Out:
8
File table:
Heap:


ID: 1
Stack:
print(v * 10)
Symbolic table:
v->10
Out:
8
File table:
Heap:


ID: 1
Stack:

Symbolic table:
v->10
Out:
8
100
File table:
Heap:


